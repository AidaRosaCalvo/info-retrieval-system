NOTE 
Field cache can only be used on fields that have a single term. This typically means the field was 
indexed with Index.NOT_ANALYZED. 
 The field cache supports many native types: byte, short, int, long, float, double, strings, StringIndex
(includes sort order of the string values). An “auto” method (getAuto) will peek at the first document in 
the index and attempt to guess the appropriate native type. 
 The first time the field cache is accessed for a given reader and field, the values for all documents are 
visited and loaded into memory as a single large array, and recorded into an internal cache keyed on the 
reader instance and the field name. This process can be quite timeconsuming, for a large index. 
Subsequent calls quickly return the same array from the cache. The cache entry is not cleared until the 
reader is closed and completely dereferenced by your application (a WeakHashMapis used under the 
hood). 
 It’s important to factor in the memory usage of field cache. Numeric fields require the number of 
bytes for the native type, multiplied by the number of documents. For Stringtypes, each unique term is 
also cached for each document. For highly unique fields, such as “title”, this can be a large amount of 
memory. The StringIndexfield cache, which is used when sorting by a string field, also stores an 
additional int array holding the sort order for all documents. 